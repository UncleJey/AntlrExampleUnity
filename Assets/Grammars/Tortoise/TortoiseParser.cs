//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tortoise.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class TortoiseParser : Parser {
	public const int
		MOV=1, ROT=2, DIR=3, VAL=4, INT=5, NEWLINE=6, WS=7;
	public const int
		RULE_prog = 0, RULE_cmd = 1, RULE_move = 2, RULE_rotate = 3;
	public static readonly string[] ruleNames = {
		"prog", "cmd", "move", "rotate"
	};

	private static readonly string[] _LiteralNames = {
		null, "'mov'", "'rot'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MOV", "ROT", "DIR", "VAL", "INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tortoise.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TortoiseParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 8; cmd();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==MOV || _la==ROT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(TortoiseParser.NEWLINE, 0); }
		public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		public RotateContext rotate() {
			return GetRuleContext<RotateContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 2, RULE_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			switch (TokenStream.La(1)) {
			case MOV:
				{
				State = 13; move();
				}
				break;
			case ROT:
				{
				State = 14; rotate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 17; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		public ITerminalNode MOV() { return GetToken(TortoiseParser.MOV, 0); }
		public ITerminalNode DIR() { return GetToken(TortoiseParser.DIR, 0); }
		public ITerminalNode VAL() { return GetToken(TortoiseParser.VAL, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 4, RULE_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(MOV);
			State = 20; Match(DIR);
			State = 21; Match(VAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotateContext : ParserRuleContext {
		public ITerminalNode ROT() { return GetToken(TortoiseParser.ROT, 0); }
		public ITerminalNode VAL() { return GetToken(TortoiseParser.VAL, 0); }
		public RotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterRotate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitRotate(this);
		}
	}

	[RuleVersion(0)]
	public RotateContext rotate() {
		RotateContext _localctx = new RotateContext(Context, State);
		EnterRule(_localctx, 6, RULE_rotate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; Match(ROT);
			State = 24; Match(VAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\t\x1D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x6\x2\f\n\x2\r\x2\xE\x2\r\x3\x3"+
		"\x3\x3\x5\x3\x12\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x2\x2\x6\x2\x4\x6\b\x2\x2\x1A\x2\v\x3\x2\x2\x2\x4\x11\x3"+
		"\x2\x2\x2\x6\x15\x3\x2\x2\x2\b\x19\x3\x2\x2\x2\n\f\x5\x4\x3\x2\v\n\x3"+
		"\x2\x2\x2\f\r\x3\x2\x2\x2\r\v\x3\x2\x2\x2\r\xE\x3\x2\x2\x2\xE\x3\x3\x2"+
		"\x2\x2\xF\x12\x5\x6\x4\x2\x10\x12\x5\b\x5\x2\x11\xF\x3\x2\x2\x2\x11\x10"+
		"\x3\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13\x14\a\b\x2\x2\x14\x5\x3\x2\x2\x2"+
		"\x15\x16\a\x3\x2\x2\x16\x17\a\x5\x2\x2\x17\x18\a\x6\x2\x2\x18\a\x3\x2"+
		"\x2\x2\x19\x1A\a\x4\x2\x2\x1A\x1B\a\x6\x2\x2\x1B\t\x3\x2\x2\x2\x4\r\x11";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
