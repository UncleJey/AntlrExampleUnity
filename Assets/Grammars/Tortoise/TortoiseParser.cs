//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tortoise.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TortoiseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MOV=1, ROT=2, DIR=3, VAL=4, INT=5, NEWLINE=6, WS=7;
	public const int
		RULE_prog = 0, RULE_cmd = 1, RULE_move = 2, RULE_rotate = 3;
	public static readonly string[] ruleNames = {
		"prog", "cmd", "move", "rotate"
	};

	private static readonly string[] _LiteralNames = {
		null, "'mov'", "'rot'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MOV", "ROT", "DIR", "VAL", "INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tortoise.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TortoiseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public TortoiseCompiler Compiler = new TortoiseCompiler();

		public TortoiseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TortoiseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITortoiseVisitor<TResult> typedVisitor = visitor as ITortoiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8;
				cmd();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MOV || _la==ROT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(TortoiseParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RotateContext rotate() {
			return GetRuleContext<RotateContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITortoiseVisitor<TResult> typedVisitor = visitor as ITortoiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 2, RULE_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MOV:
				{
				State = 13;
				move();
				}
				break;
			case ROT:
				{
				State = 14;
				rotate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 17;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		public IToken _DIR;
		public IToken _VAL;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOV() { return GetToken(TortoiseParser.MOV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIR() { return GetToken(TortoiseParser.DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(TortoiseParser.VAL, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITortoiseVisitor<TResult> typedVisitor = visitor as ITortoiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 4, RULE_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			Match(MOV);
			State = 20;
			_localctx._DIR = Match(DIR);
			State = 21;
			_localctx._VAL = Match(VAL);
			 Compiler.AddMoveCommand((_localctx._DIR!=null?_localctx._DIR.Text:null), (_localctx._VAL!=null?_localctx._VAL.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotateContext : ParserRuleContext {
		public IToken _VAL;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROT() { return GetToken(TortoiseParser.ROT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(TortoiseParser.VAL, 0); }
		public RotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.EnterRotate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITortoiseListener typedListener = listener as ITortoiseListener;
			if (typedListener != null) typedListener.ExitRotate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITortoiseVisitor<TResult> typedVisitor = visitor as ITortoiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotateContext rotate() {
		RotateContext _localctx = new RotateContext(Context, State);
		EnterRule(_localctx, 6, RULE_rotate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(ROT);
			State = 25;
			_localctx._VAL = Match(VAL);
			 Compiler.AddRotateCommand((_localctx._VAL!=null?_localctx._VAL.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,7,29,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,4,0,10,8,0,11,0,12,0,11,1,
		1,1,1,3,1,16,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,0,0,4,
		0,2,4,6,0,0,26,0,9,1,0,0,0,2,15,1,0,0,0,4,19,1,0,0,0,6,24,1,0,0,0,8,10,
		3,2,1,0,9,8,1,0,0,0,10,11,1,0,0,0,11,9,1,0,0,0,11,12,1,0,0,0,12,1,1,0,
		0,0,13,16,3,4,2,0,14,16,3,6,3,0,15,13,1,0,0,0,15,14,1,0,0,0,16,17,1,0,
		0,0,17,18,5,6,0,0,18,3,1,0,0,0,19,20,5,1,0,0,20,21,5,3,0,0,21,22,5,4,0,
		0,22,23,6,2,-1,0,23,5,1,0,0,0,24,25,5,2,0,0,25,26,5,4,0,0,26,27,6,3,-1,
		0,27,7,1,0,0,0,2,11,15
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
